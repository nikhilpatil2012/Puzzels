mport java.util.LinkedHashSet;
import java.util.Vector;

public class TravellingMan {

public static void main(String args[]){

boolean allOk = false;

int N = Integer.valueOf(args[0]); // Num of Stations
int T = Integer.valueOf(args[1]); // Deadline Time
int M = Integer.valueOf(args[2]); // Num of Buses

int num[][] = new int[M][4], count = 3;
int graph[][] = new int[N][N];

if(N >= 2 && N <= 50000 && T >= 1 && T <= 1e9 && M >=1 && M <= 1e5){
allOk = true;
}

if(allOk == true){



for(int i=0; i<= M-1; i++){

for(int j=0; j<=3; j++){

num[i][j] = Integer.valueOf(args[count]);
count++;
}
}

for(int i=0; i<= N-1; i++){

for(int j=0; j<=N-1; j++){

graph[i][j] = 0; 

}
}

for(int i=0; i<= N-1; i++){

graph[num[i][0]-1][num[i][1]-1] = 1;

} 
LinkedHashSet<Integer> set = new LinkedHashSet<Integer>();

for(int i=0; i<= M-1; i++){  
for(int j=0; j<=1; j++){

set.add(num[i][j]);
}
}

int vertice[] =	giveMeArray(set.toArray());

int start = vertice[0]; // start = 1;
int B = 0, min = 0, E = 0, nxtVertex = 0;

Vector<Integer> vec = new Vector<Integer>();

vec.add(start);

while(nxtVertex != 5){

for(int j=0; j<=N-1; j++){

if(graph[start-1][j] == 1){

int u = start, v = j+1;

for(int i=0; i<= M-1; i++){	

if(num[i][0] == u && num[i][1] == v && u != v && u>=1 && u<=N && v>=1 && v<=N){

int wt = num[i][2] - B; // S - B

graph[start-1][j] = wt;

if(min == 0){
min = wt;
E = num[i][3];
nxtVertex = j+1;

}else if(wt < min) {
min = wt;
E = num[i][3];
nxtVertex = j+1;

} 
break;
} // Second If ends here
}

}// first If ends here

}
start = nxtVertex;
B = E;
vec.add(min);
min=0;
//break; 
}

int wts[] = giveMeArray(vec.toArray());

int max = wts[0];

for(int i=1;i<=wts.length-1; i++){

if(wts[i] > max){
max = wts[i];
}
}

if(E <= T){
System.out.println(max);

}else{
System.out.println(-1);

}

}// Bigger If ends here allOk = true
}

public static int[] giveMeArray(Object arr[]){

int vertice[] = new int[arr.length];

for(int i=0; i<=arr.length-2; i++){

if((Integer)arr[i] > (Integer)arr[i+1]){
Object ob = arr[i+1];
arr[i+1] = arr[i];
arr[i] = ob;
}

}

for(int i=0; i<=arr.length-1; i++){

vertice[i] = (Integer)arr[i];
}

return vertice;
}

}
